---
layout: notes
title: 'Exercise 1.16'
category: solutions
---

# {{ page.title }}

**Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does `fast-expt`.**

From the hints:

* $ (b^{n/2})^{2} = (b^{2})^{n/2} $
* $ ab^{n} $ should have the same value through the transition.

I want to decrease the exponent until it equals zero, at which point the result variable, _a_, will have the result. So the question is: when I halve the exponent _n_, how can I modify _a_ and _b_ so that the value $ ab^{n} $ is unchanged, and that we're somehow closer to the result?

$$ ab^{n}=a(b^{2})^{\frac{n}{2}} $$

$$ ab^{n} = ab \times b^{n-1} $$

So my strategy is:

* If _n_ is even, halve _n_, square _b_, and leave _a_ alone
* If _n_ is odd, decrement _n_ by 1, and multiply _a_ by _b_.

Here is the procedure.

{% highlight scm %}
(define (fast-iter-expt x y)
  (define (fast-helper a b n)
    (cond ((= 0 n) a)
          ((odd? n) (fast-helper (* b a) b (- n 1)))
          ((even? n) (fast-helper a (* b b) (/ n 2)))))
  (fast-helper 1 x y))
{% endhighlight %}

-

Repository source: [exer_1-16.scm](https://github.com/brokaw/sicp/blob/master/exercises/exer_1-16.scm)