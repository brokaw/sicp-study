---
layout: default
title: 'Exercise 1.16'
permalink: /sicp/:categories/:title.html
category: exercise
---
#{{ page.title }}
1.16 Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt.

From the hints

* $(b^{n/2})^{2} = (b^{2})^{n/2}$
* $ab^{n} should have the same value through the transition.

I want to decrease the exponent until it equals zero, at which point the result variable, a, will have the result. So the question is, when I halve the exponent __n__, how can I modify a and b so that $ab^{n}$ is unchanged, and that we're somehow closer to the result?

$$ ab^{n}=a(b^{2})^{\frac{n}{2}} $$

$$ ab^{n} = ab \times b^{n-1} $$

So my strategy is:

* If __n__ is even, halve __n__, square __b__, and leave __a__ alone
* If __n__ is odd, decrement __n__ by 1, and multiply __a__ by __b__.

Here is the procedure.

{% highlight scm %}
(define (fast-iter-expt x y)
  (define (fast-helper a b n)
    (cond ((= 0 n) a)
          ((odd? n) (fast-helper (* b a) b (- n 1)))
          ((even? n) (fast-helper a (* b b) (/ n 2)))))
  (fast-helper 1 x y))
{% endhighlight %}
